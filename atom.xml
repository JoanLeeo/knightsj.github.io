<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Knight_SJ</title>
  <subtitle>iOS开发|上海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/knightsj/knightsj.github.io/"/>
  <updated>2017-01-10T11:41:36.000Z</updated>
  <id>https://github.com/knightsj/knightsj.github.io/</id>
  
  <author>
    <name>Knight_SJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员的修炼：从优秀到卓越 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2017/01/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%EF%BC%9A%E4%BB%8E%E4%BC%98%E7%A7%80%E5%88%B0%E5%8D%93%E8%B6%8A%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2017/01/10/程序员的修炼：从优秀到卓越 - 读书笔记/</id>
    <published>2017-01-10T11:41:15.000Z</published>
    <updated>2017-01-10T11:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/859001-f3a3b8377fa20a7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="程序员的修炼 - 从优秀到卓越"></p>
<p>本书是笔者上一篇读书笔记<a href="http://www.jianshu.com/p/33933a3ba977" target="_blank" rel="external">高效能程序员的修炼</a>的姊妹篇，同样介绍了一些程序员需要了解的，有关于编程本身以外的一些事情。</p>
<p>和上一篇读书笔记的风格类似，笔者摘录了几段原书内容并结合了作者的感悟写下了这篇读书笔记。笔者还是深切希望各路英雄能提出宝贵的意见和想法。</p>
<hr>
<p>###关于 To-Do list</p>
<blockquote>
<p>这个冗长的To-Do列表始终存在着，像一把悬挂在我头顶上的利刃，而且每天都在变得更加沉重和锋利。</p>
<p>每天早上使劲想出这天你需要做的最重要的3件事。</p>
</blockquote>
<p>其实对于待办事项列表，笔者也读过相关的书籍，一般都是不推荐使用待办事项列表的。笔者总结出原因有二：</p>
<ul>
<li><p>待办事项列表上面的待办事项只是列出了还未完成的事情而已，并不带有“何时开始进行”和“何时完成“的信息。简单说，就是只有“what to do”而没有“when to do”和“when to finish”。也就是它本身能带给列表主人的驱动力不够高。</p>
</li>
<li><p>正是因为待办事项列表带给主人的驱动力不高，那么结果就是它们一直会躺在列表里持续很长时间。那么它们的主人在潜意识中一直挂念着它们，分散了主人的精力。因为主人“知道”总有一些事情还是没有完成的。 </p>
</li>
</ul>
<hr>
<p>###关于探索的态度</p>
<blockquote>
<p>比起专业技能或者智商，成功更需要一种探索的态度，它是一种对于可能性和失败后果的执着。那些具备良好潜质的人总是会做出类似的回答“我总是在犯一些作物。昨天刚发生了一件挺严重的事情，前因后果是这样的。。。”。</p>
<p>相反，那些回答“我并没有犯过大错误”或者“我犯过一些严重的错误，但是错误的原因并不在于我”的人是不会成为杰出的外科医生的。</p>
</blockquote>
<p>探索的态度对于程序员也是尤为重要的。笔者在开始写代码的时候总是以“解决问题就万事大吉”的标准，遇到了可能的坑却睁一只眼闭一只眼。但是每每这样的时候，后来总是会出bug。</p>
<p>其实这就是逃避，就是一种缺乏探索精神的表现。其实我把那些坑弄懂了也不需要多少时间嘛。弄懂了，以后再遇到就稳稳当当搞定了。没弄懂，就还是踩坑。突然想到了一句话：遇到问题，你硬着头皮解决了一半，就只剩下一半的问题。但是你逃避，就是两个问题了。</p>
<blockquote>
<p>不管你在做什么项目，怀揣着学习和锻炼的态度去完成它吧，这是绝对值得的！与项目结果相比，过程才是最大的财富。如果你没能从一个项目的过程中学到一点东西，这才是真正失败的项目。</p>
</blockquote>
<hr>
<p>###关于专家</p>
<blockquote>
<p>这个世界上只有少数的专家，却有大量的普通人。当你想要建立一个包含各种信息的网站时，这些普通人的贡献是最重要的。这是一个不规则的世界，里面装满了无穷无尽的细节。</p>
<p>作为专家，重要的是不是告诉别人你知道什么。而是要清楚你应该问什么样的问题，并且灵活运用你所掌握的知识去解决眼下的具体问题。作为专家，你的作用是提供明确的，可执行的方向。</p>
</blockquote>
<p>读到这些，笔者觉得专家理应受到种种质疑，而为了能经得起这些质疑，那么就不应该跟人家说“我读了神马神马著作，精通神马神马技术，你看我的论文，你看我的研究成果等等”，真正证明自己是专家的途径，一般只有帮助非专家人士或者别的专家高效地解决问题。</p>
<p>其实，庞大的知识体系也是对解决问题帮助很大的：因为这些有着庞大知识体系的专家的晶体智力水平很高，很多时候，他们并不需要动脑子(也就是流体智力)，直接调出相应知识就能解决。所以说，那些自称专家的人如果连连无法解决问题的话，那么真的是low爆了。</p>
<hr>
<p>###关于软件项目管理</p>
<blockquote>
<p>鼓励并强制要求程序员创建一张他们所要做的全部事情的列表，然后尽可能添加所有的子项，这样就能估算这个任务话费多少时间了。</p>
<p>如果有人问你的时间表，你应该拿出一张你要做的所有事情的列表。如果拿不出来，你所要做的第一件事情，就是要做出这么一张列表。</p>
</blockquote>
<p>这种列表和待办事项列表稍有不同。这种列表属于“时间表”，它的目的是监控进度:所以说，它的时间总长度是不变的。但是待办事项列表的时间总长度是趋于“无限的”(当然，只对于执行力很差的人来说)。</p>
<hr>
<p>###关于“一夜成名”</p>
<blockquote>
<p>一夜成名的传说容易让人误入歧途，并且遗毒不浅。如果你打算做一个全新的东西，要有打持久战的准备。</p>
<p>勤于练习：不是一遍又一遍的简单重复，而是要不断挑战略微超出自身能力之外的任务-努力尝试，并在做的同时以及之后对自己的表现进行评估，然后纠正错误，如此反复。</p>
</blockquote>
<p>这里谈到了程序员对自己本身的迭代：快速迭代。其实同软件开发是一个道理：软件迭代的速度远重要于迭代的质量。也就是说，我们在学习的过程中，对自己的提升也应该是快速而轻盈的。</p>
<p>切忌一口气吃个胖子，肯定是吃不消的。应该结合自己已有的知识水平，再寻找对自己来说稍微有点挑战性的技术来攻克，一来学习效率高，二来可以提升自信，进入到新一轮的学习中去。</p>
<hr>
<p>###关于优秀和平庸程序员之间的鸿沟</p>
<blockquote>
<ul>
<li>成为更加优秀的程序员的方法是抛开编程。</li>
<li>你的兴趣越广泛，就能越胜任你的工作。</li>
<li>为了真正地成为一名更好的程序员，你必须培养自己对于编程周边所有事情的热情。</li>
<li>单单靠编程，你只能补足或者增强自己已有的变成技能，永远也无法成为一名优秀的程序员。你需要尝试去了解你的客户，你所处的行业以及相关的业务。</li>
<li>聪明的开发者知道，他们的工作远远不止编写代码和发布产品：他们的工作是开发出人们真正想要使用的软件。这当然包括编码，但还有大量全局性的其他事情，比如撰写技术文档，交互设计，培养用户社区，乃至产品愿景，这些对于软件的全貌成功都是至关重要的。</li>
</ul>
<hr>
</blockquote>
<p>###关于修复bug</p>
<blockquote>
<p>在对报告数据的广泛分析之后，我们看到：80%的客服问题在修复了用户报得最多的20%的bug之后就得到解决。即使修复用户报的最多的1%的bug，也能解决50%的客服问题。这个分析结果通常对于各家公司都是成立的。</p>
<p>如果你修复了一个真实用户永远也碰不到的bug，那你修复有什么价值呢？</p>
<p>你越快将你的软件推到真实用户面前，就会得到越多的数据来改进你的软件。问题不在于你在发布软件的时候带去了多少bug，而是在于你能多快地修复那些bug。</p>
</blockquote>
<p>因此，笔者认为在bug管理的问题上，要注意两点：</p>
<ul>
<li>不要怕将bug暴露在用户面前，尽早地收集用户的反馈数据是关键。</li>
<li>而且，在收到大量的反馈数据之后，也应遵循二八定律，要以bug的影响程度来划分bug的优先级,不应盲目排列修改bug的顺序。</li>
</ul>
<hr>
<p>###关于衡量软件的成功</p>
<blockquote>
<p>多少用户在真正使用你的软件？这才是衡量成功的终极标准。</p>
</blockquote>
<p>其实无论交互多绚丽，功能多么吊炸天，一旦用户不需要，用户不喜欢，不掏钱，其实是没有任何卵用的。而且在一定的技术水准上，如果无法“说服”大量客户使用产品，也同样是让人心痛的。</p>
<ul>
<li>技术再牛也要从用户体验出发，少做一些中看不中用的东西。想出数百个功能很容易，但是从中挑出几个可以提升用户体验，真正能吸引用户，让用户掏腰包的功能实在不易。</li>
</ul>
<ul>
<li>产品做出来了，产品有没有人用，营销和推广同时占有举足轻重的作用。突然想到以前在一本营销书籍看到的：能做出比麦当劳好吃的汉堡包很容易，但是能比麦当劳卖得好却是很难得，众人难以模仿麦当劳整体的营销模式。相同的，像ZARA品牌的生产模式和营销模式之高效，是其他品牌无法超越的，这也是其风靡全球的原因。</li>
</ul>
<hr>
<p>###关于用户的谎言</p>
<blockquote>
<ul>
<li>我们必须根据用户的实际行为模式来设计产品。</li>
<li>他们会说喜欢你的软件。但是我们应该去观察他们是否使用了软件，以及他们是怎么使用的。基于行为数据去设计软件，而不是靠用户说的“谎言”。</li>
</ul>
</blockquote>
<p>笔者认为，我们很少能从用户言语上得到用户特别真实的感受。那些善良的客户们有时碍于面子，有时想当和事老，凭着“你好我好大家好”的原则，说一些心里没有的，善意的谎言。</p>
<p>所以那些问卷调查什么的，走街串巷访问什么的其实意义不大。真正能“窥视”用户内心的是那些技术埋点。我记得有一次参加一个分享会，触宝科技的CEO跟大家分享了他们的埋点:他们通过埋点的方式，甚至会知道导致用户删掉app的是哪几个界面和动作。这让我感触很大，既然能做到这些，那么如果想知道用户喜欢点击那里，喜欢看哪里，喜欢做那几个动作，岂不是轻而易举？知己知彼，百战岂殆？</p>
<hr>
<p>###最后作者推荐的书籍</p>
<ol>
<li>《代码大全(第二版)》</li>
<li>《点石成金：访客至上的网页设计秘籍》</li>
<li>《人件》</li>
<li>《程序员修炼之道：从小工到专家》</li>
<li>《软件工程的事实与谬误》</li>
</ol>
<p>其中第1本和第4本笔者在看。第1本对于非科班出身的笔者来说实在是晦涩难懂。不过既然作者说读完此书就能超过90%的程序员，那么不失为一个节省时间的好方法。以后有机会的话，希望能和各路英雄讨论讨论个中奥妙。</p>
<hr>
<p>###笔者最后的话</p>
<p>其实还是希望能和各位相互讨论，其实相比于文章被“喜欢”，笔者更希望诸位能留下评论，毫不留情地指出小弟想法中的不妥之处，这些是远比“打赏”和“喜欢”更让小弟高兴的呢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-f3a3b8377fa20a7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高效能程序员的修炼 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2017/01/10/%E9%AB%98%E6%95%88%E8%83%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2017/01/10/高效能程序员的修炼 - 读书笔记/</id>
    <published>2017-01-10T11:39:48.000Z</published>
    <updated>2017-01-10T11:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/859001-d4f6ace667765fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高效能程序员的修炼"></p>
<p>俗话说：程序员不能只想着写代码。在编程以外的闲暇时间，读一点这种有助于程序员扩展视野和提高素养的书籍是很好的。</p>
<p>笔者找到了这本《高效能程序员的修炼》：本书作者是大名鼎鼎<a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>的创始人Jeff Atwood，内容是有关代码以外的，需要每个程序员思考和注意的事情。</p>
<p>这本书是笔者在今年1月份看的，因为忙于项目开发，所以没有整理好笔记。正好这周五公司app提交过审，有空宅在家里整理一下。笔记内容没有提到书中所说的每个方面，<strong>只是针对了笔者觉得比较重要的几点并结合了笔者自己的想法和感悟整理而成</strong>。</p>
<p>笔者的<strong>读书笔记的格式</strong>：<br><strong>标题</strong>：与书中目录不符，完全由笔者自己列出。<br><strong>正文</strong>：浅灰色框中的文字为书中摘录，其他部分均为笔者个人观点。</p>
<p><strong>欢迎各路大侠指点！欢迎各路大侠指点！欢迎各路大侠指点！</strong></p>
<hr>
<p>##关于选择工作</p>
<blockquote>
<p>我更建议人们先花时间想想，什么样的问题才是他们真正热爱和感兴趣的，然后再好好研究这些问题。生命中最难的，是想清楚你真正想要做的事情，而不是学上一堆假设将来会有用的东西。</p>
</blockquote>
<p>所以说在决定这种人生大事上，确实要花上心思，就好比笔者自己在通信工程专业从本科一直念完了硕士，拿到硕士学位证后花了一周的时间苦思冥想，探求内心后，毅然决定做软件，顶住各方压力(因为毕竟是换专业择业，不过还好父母还是一直很支持我的)三个月的时间自学了iOS开发。<br>如今已经入职4个月，在工作学习中甚感愉快，虽然有时会有压力，但是每天都过得很开心，因为这正是我想做的。</p>
<hr>
<p>##关于程序员的表达能力</p>
<blockquote>
<p>杰出的程序员和勉强过得去的程序员之间的差别是他们能不能把他们的想法表达清楚。</p>
</blockquote>
<p>大家应该不会怀疑程序员的平均智商，但是程序员中每个人的表达能力却参差不齐，差别极大。其实有些时候头脑中想到的方法可能是在潜意识下想到的，如果这时候需要我们有条理地说出来，确实不是一件容易的事。</p>
<p>像这种用意识层面的语言来表达潜意识的思考的能力确实是值得锻炼的。试想一下，如果我们能把自己潜意识层面的思考准确地再现于意识层面，那么这显然会有助于帮助我们检查思维的缜密性和正确性，而且也会锻炼我们的逻辑思维，从而能更好地去思考，形成良性循环。</p>
<hr>
<p>##关于程序员的学习：</p>
<blockquote>
<p>勤加练习固然重要，但是只顾着买头写代码，没有讨论和反思的时间，那么是无法得到真正的进步的。在阅读博客和相关书籍的过程中，从自身利益出发去考虑，如果我们能从中找到哪怕一点对我们有用的东西，其实就已经很赚了。</p>
</blockquote>
<p>复习和反思是学习过程中很重要的环节，如果没有及时的复习与反思，那么往往事倍公半：忘记知识，而且就算不忘，也无法高效地将知识提取出来。作为程序员，应该适当脱离键盘反复思考，将学到的知识高效地整合到自己的知识结构中，有助于知识的提取和运用。</p>
<hr>
<p>###关于代码</p>
<ul>
<li>评价及代码的几个维度:从简洁性开始，依据测试的结果按需提升其他的维度。<blockquote>
<ol>
<li>代码简洁度</li>
<li>功能完整性</li>
<li>执行速度</li>
<li>编码所花费时间</li>
<li>健壮性</li>
<li>灵活性</li>
</ol>
</blockquote>
</li>
</ul>
<ul>
<li>你的代码越多，bug能藏身的地方就越多。</li>
<li>最好的代码就是完全没有代码。</li>
</ul>
<hr>
<p>##关于代码的注释</p>
<blockquote>
<ul>
<li>注释需要说：程序<strong>为什么</strong>这样工作。</li>
<li>你应该总是专注于编写代码，而忘了还有注释这种东西的存在。</li>
<li>当我脑子里了一个明确的目标，并且有一段复杂的代码要写时，我会把时间花在时间代码上面，而不是写下他的故事，讲给我自己听。</li>
<li>如果你的代码在没有注释的情况下显得过于复杂，很难被人理解，那只能说明你的代码写得太早了，重写代码，直到它不再需要任何注释。</li>
</ul>
</blockquote>
<p>读到这里的时候笔者很是惭愧。因为笔者在写代码的时候，是将代码和注释一起写的。所以应该将这个习惯改过来：写代码的时候忘记注释，应该尽全力用代码自己解释逻辑。到最后逻辑达到很清晰的程度后，再加上必要的注释：为什么用的是这个逻辑。</p>
<hr>
<p>###关于请教问题</p>
<blockquote>
<ul>
<li><p>向别人请教问题：</p>
<ol>
<li>提供足够多的细节描述发生的状况</li>
<li>说明你为什么需要这个答案</li>
<li>表述你所做的研究和发现</li>
</ol>
</li>
<li><p>如果你想让别人花上宝贵的时间来帮助你，你也要花了宝贵的时间酝酿出一个合格的问题才算公平。</p>
</li>
</ul>
</blockquote>
<p>笔者在工作中也会请教同事问题，前几次问的时候发现自己将问题说出来之后，自己头脑里已经有了解决的办法，而且觉得很简单。所以后来想问问题的时候，保证自己先解决一般问题，将问题深入，然后尽可能问出高质量的问题来。</p>
<hr>
<p>###关于提出问题</p>
<blockquote>
<ul>
<li>提出正确的问题差不多已经把问题解决了一半。</li>
<li>完全投入地向一个假想中的人或者是没有生命的物体问一个透彻而相近的问题。</li>
</ul>
</blockquote>
<p>笔者认为如果是对一个无生命体，大脑中负责情感的部分会被抑制，会更加促进理性分析，更加清晰地表述问题(因为你的潜意识知道<em>小黄鸭*</em>是不会“理解”你的话里半点遗漏的点)。</p>
<hr>
<p>##关于创意和执行</p>
<blockquote>
<ul>
<li>如果你想要赚钱，你必须把这两者相乘，除非创意被执行，否则它一文不值，执行是创意的倍增器，真正价值巨大的是执行。</li>
</ul>
<ul>
<li>与其担心你全心投入等下一个创意是否足够出色，不如担心你能执行的多好。</li>
</ul>
<ul>
<li>在软件开发领域，执行意味着专注于构成你的应用程序的所有微小细节，如果你不是始终沉迷于你的应用程序的每个方面，不去优化和赶紧它的每一处细节，那么你就不是在执行，至少，不是在很好地执行。</li>
</ul>
</blockquote>
<hr>
<p>##关于团队</p>
<blockquote>
<ul>
<li>如果你把一个好的创意给一个普通的团队，他们会把它搞砸。如果你把一个普通的创意给一个好的团队，他们会对它加以完善，或者他们会把那个创意丢掉，然后相处一些更棒的 - Catmull”</li>
</ul>
<ul>
<li>如果你想取得成功，不要担心没有伟大的创意，转而去专注于培养卓越的团队。</li>
</ul>
</blockquote>
<hr>
<p>###关于会议：</p>
<blockquote>
<p>会议绝不应该超过一个小时。<br>每个会议都要有一个清晰的目标声明。<br>在开户之前做好功课：提前知道将要讨论和分享的内容。<br>把会议变成可选的：每一个人都因为他们想要在那里，或者需要在那里。<br>会议结束后，概括一下待办事项。</p>
</blockquote>
<p>其实会议确实比较耗费时间，所以就要为了提升会议的效率和价值：</p>
<ol>
<li>在会议开始前：熟悉会议内容并提前思考。</li>
<li>在会议结束前：整理会议结果，列个待办事项。</li>
<li>在会议结束后：执行！执行！执行！</li>
</ol>
<hr>
<p>##关于用户和产品</p>
<blockquote>
<ul>
<li><p>用户不会阅读你屏幕上的任何东西。用户只会读取屏幕上足以让他们完成任务的，最少量的文字。</p>
</li>
<li><p>与世隔绝在实验室花上三个月的时间修复第一版里的问题，不如把这3个月的时间用于倾听来自真实世界里使用你的软件的用户提出的反馈。</p>
</li>
</ul>
</blockquote>
<p>这两条分别告诉我们：</p>
<ol>
<li>我们在做产品的时候，应该把用户当成“弱视不会思考”的人。</li>
<li>用户可以“为我们所用”。</li>
</ol>
<p>看似是矛盾的两点，但确是提升用户体验的“黄金理论”。<br>对于第一条，笔者深有体验:笔者做了一个类似新手引导的教程，因为队友修改了页面加载的逻辑，导致了用户只能通过，点击，滑动，手动加载后才能出现看到教程的情况，而刚看到页面时，教程是不会自动出来的，其实这个体验是很差的，因为用户需要自己动手。但是当时由于已经处于测试末尾阶段，我个人也没有在意。</p>
<p>在跟产品经理交流后，产品经理人很好，只是说了最好要加上。我想了想还是加了，添加的方法很简单，只是在<code>viewWillAppear</code>方法里加了触发的逻辑，但却发现体验直线上升。这件事对我感触很大，只是一两行代码就能明显改善用户体验，那么为什么不去做呢？为什么一定要去麻烦用户去动脑，去动手呢？</p>
<hr>
<p>###笔者结语：</p>
<p>本书中，作者说的点还是蛮多的，比较杂，但确是引发程序员代码之外思考的好的启蒙，有助于不让程序员局限于代码之中，能够多角度，多层面考虑问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-d4f6ace667765fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何高效学习 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2017/01/10/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2017/01/10/如何高效学习 - 读书笔记/</id>
    <published>2017-01-10T11:29:01.000Z</published>
    <updated>2017-01-10T11:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/859001-19e2323f8483e093.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如何高效学习"></p>
<p>笔者的话：本书介绍了整体性学习法，强调在学习过程中，需要通过比喻和抽象的方法，将新知识与旧知识相互联系，以提高学习效率和深度的学习方法。笔者亲测，甚是有效，在此强烈推荐给大家。</p>
<h1 id="Part-1-整体性学习策略"><a href="#Part-1-整体性学习策略" class="headerlink" title="Part 1 整体性学习策略"></a>Part 1 整体性学习策略</h1><hr>
<h2 id="1-1-什么是整体性学习"><a href="#1-1-什么是整体性学习" class="headerlink" title="1.1 什么是整体性学习"></a>1.1 什么是整体性学习</h2><ul>
<li>整体性学习需要采取多种途径综合学习，而不是试图在大脑中复制一个完美的拷贝。</li>
<li>整体性学习是运用你大脑里已有的丰富的神经元网络吸收、整合信息。</li>
<li>整体性学习在于创造<strong>信息的网络</strong>，一个知识与另一个知识相互关联，那些相互关联的知识网络使你真正做到对知识的完全理解，从而轻松地驾驭知识。</li>
</ul>
<p>##1.2 整体性学习基于三种主要观点</p>
<ol>
<li>结构</li>
<li>模型</li>
<li>高速公路</li>
</ol>
<h3 id="1-21-结构"><a href="#1-21-结构" class="headerlink" title="1.21 结构"></a>1.21 结构</h3><p>结构就是说一系列紧密联系的知识体系。</p>
<blockquote>
<p>打个比方：结构就好像你思想中的一座城市，在城市中有很多建筑物，建筑物之间有道路相连，有些建筑高大而且重要，与城市中的其他建筑有上百条路相连。理解就是结构<strong>高度发达完善</strong>的结果。</p>
</blockquote>
<ul>
<li><p>是不是有些学科你可以轻松“拿下”？你读起这些科目的书毫不费力、兴趣盎然，一切内容看起来那么浅显、通俗，原因何在？因为你的脑袋里已经有这些科目的发达知识结构。假如说结构就是脑袋里的城市的话，那么这些城市一定是道路四通八达、路面整洁而且交通井然有序，虽然车水马龙，却从不见交通堵塞。</p>
</li>
<li><p>相反，为什么有些学科理解起来那么困难呢？这说明城市简陋，道路不畅，甚至乱建一气，违章建筑、豆腐渣工程比比皆是，有些道路甚至无所指向。建立良好的知识结构就是绘制一份优秀的地图，就是建造一座设计良好的城市。所以建立知识结构时，你的目标就是<strong>在各种知识之间建立尽可能多的联系</strong>，聪明的人会很自然地这么做，每学习一个新概念，都会自动地与其他知识相联系。</p>
</li>
</ul>
<p>###1.22 模型<br>模型是简化的结构，是结构的快照，更为简单和更易储存。通过将一些<strong>核心概念</strong>联系在一起，就可以创建一个模型。打个比方：书的目录。模型是一种压缩形式，它把多个关键思想压至一处。模型就像是结构的种子，是一座建筑的地基和框架，是知识最核心的概念，在此基础上将引出全部的知识。</p>
<p>###1.23 高速公路<br>高速公路是知识体系(结构)间的联系。</p>
<blockquote>
<p>打个比方：城市之间的高速公路。高速公路能激发创造力。“跳出盒子”之外思考最恰当地描述了那些在结构之外思考的人们。高速公路让他们以前所未有的方式思考，以不曾想过的方式将常人眼里风马牛不相及的专业联系在一起思考，这就是创造。利用高速公路可以在专业交叉的领域建立起新的结构。</p>
</blockquote>
<p>##1.3 整体性学习的顺序</p>
<ol>
<li>获取</li>
<li>理解</li>
<li>拓展</li>
<li>纠错</li>
<li>应用</li>
</ol>
<p>###1.31 获取</p>
<ul>
<li>获取指信息从采集进入到大脑的过程。</li>
<li>获取信息有三个主要目标:<ol>
<li>简化：将无用的东西尽量删除，只有那些对于形成模型有帮助的例子才需要认真学习。</li>
<li>容量：尽可能获得更多的信息。</li>
<li>速度：尽可能提高获取信息的速度。</li>
</ol>
</li>
</ul>
<p>###1.32 理解</p>
<ul>
<li>理解不能指停留在信息的表面意思，还要了解信息(公式)是如何得来的，与其它信息(公式)的关系。</li>
</ul>
<p>###1.33 拓展</p>
<ul>
<li>拓展：利用模型来建华和扩展你的知识结构，也要拓展对知识的理解。</li>
<li><p>一名整体性学习者在学习新公式时会问道：</p>
<ul>
<li>公式是怎么来的？</li>
<li>公式中的每个成分代表的真实含义是什么？</li>
<li>公式中的什么成分可以做些改变？</li>
<li>这种改变会导致结果发生什么样的变化？</li>
<li>其他公式与这个公式有什么相同之处，又有什么不同之处？</li>
</ul>
</li>
<li><p>拓展有三种主要方式：</p>
<ol>
<li>深度拓展(知识背景探究)：在信息内部创造联系。</li>
<li>横向拓展(类似知识探究)：与此类似的结论有哪些？那些地方类似？那些地方不同？</li>
<li>纵向拓展(创造性探究)：在结构间建立高速通道，联系不同知识体系。</li>
</ol>
</li>
</ul>
<p>###1.34 纠错</p>
<ul>
<li>纠错可以看作在整体性知识网络中做修剪工作，添加一些特殊的例子，删除一些现实中不存在的联系，这不是一个完美的过程，修剪工作是必要的。</li>
</ul>
<p>###1.35 应用阶段</p>
<ul>
<li>应用是学习的最终目的，能做到学以致用方能更好地适应现实世界。对概念不仅仅停留在理解上，而是要<strong>形成一种感觉</strong>。</li>
</ul>
<p>###1.36 测试阶段</p>
<ul>
<li>五个阶段都要进行测试，测试可以让你了解弱点是什么，该如何改进它。<ol>
<li>获取阶段的测试──我以前看过或听过这个知识吗？</li>
<li>理解阶段的测试──我理解知识的含义吗？</li>
<li>拓展阶段的测试──我知道知识从何而来，与哪些知识有关系吗？</li>
<li>纠错阶段的测试──我删除了那些不恰当的联系吗？我删除了那些错误结论吗？</li>
<li>应用阶段的测试──我将知识用到实际生活中了吗？</li>
</ol>
</li>
</ul>
<p>##1.4 找出薄弱环节</p>
<ol>
<li>获取阶段──养成良好的学习，阅读和记笔记的习惯。</li>
<li>理解阶段──放慢阅读速度，寻找不同的说法。</li>
<li>拓展阶段──提高灵活性，做到举一反三，触类旁通。</li>
<li>纠错阶段──对建立的联系做足够严谨的检查。</li>
<li>应用阶段──抛开书本，做实验，接触生活。</li>
</ol>
<p>##1.5 信息结构</p>
<ol>
<li>随意信息：缺少逻辑分类多零散知识。</li>
<li>观点信息：存在争论的信息。</li>
<li>过程信息：讲述一系列动作，操作的信息。</li>
<li>具体信息：实际生活中可以观察到，听到，触到的信息。</li>
<li>抽象信息：难以理解，但是逻辑性很强，需要抽象思维理解的信息。</li>
</ol>
<h1 id="Part-2-整体性学习技术"><a href="#Part-2-整体性学习技术" class="headerlink" title="Part 2 整体性学习技术"></a>Part 2 整体性学习技术</h1><hr>
<p>##2.1 获取知识</p>
<ol>
<li>快速阅读</li>
<li>笔记流</li>
</ol>
<p>###2.11 快速阅读</p>
<ol>
<li>指读法:用手指帮助阅读</li>
<li>练习阅读法:两次在相同时间里阅读相同的资料，比较理解程度</li>
<li>积极阅读法(针对难以理解的知识) - 这一节主要观点是什么 - 我怎样才能记住主要观点 - 我要怎样将主要观点拓展开以及应用它</li>
</ol>
<p>###2.12 笔记流笔记流的制作：</p>
<ol>
<li>使用笔记流时，首先写下最主要的观点，尽量用很短的单词来替换完整的句子。</li>
<li>一旦你写下了一个观点，下一步就是在这个观点和其他观点之间画上一些箭头，观点不是建立成金字塔式的结构，而是呈现出相互关联的关系。两种笔记流：- 课下笔记流：课堂上按常规记笔记，下课后根据笔记内容制作标准的笔记流。- 评注流：首先写下最关键的信息，然后在信息之间加入联系</li>
</ol>
<p>##2.2 联系观点</p>
<ul>
<li>在获得知识之后，仅仅理解知识的表面意思一般是记不牢的，我们需要利用技巧理解和拓展这些知识。</li>
</ul>
<p>###2.21 比喻</p>
<ul>
<li>比喻就是在不熟悉的知识和熟悉的知识之间架起一座沟通的桥梁。</li>
<li>找出比喻的步骤：<ol>
<li>确定你要深入理解和记忆的信息。</li>
<li>在你的个人经验中寻找与信息部分相似的东西，要达到完全符合不太可能，所以与其寻找一个完全符合的东西，不如稍作让步，找到十几个部分符合的“不完美比喻”，在上面的例子里我想到的是雪中行走。</li>
<li>重复上述过程，检查比喻不恰当的地方。例如，雪中行走是线性的痕迹，而脑神经却是错综复杂的网络。运用比喻法的技巧-  要有寻找比喻的欲望-  注意第一个出现在脑海中的念头- 优化和测试你的比喻(多找几个比喻)</li>
</ol>
</li>
</ul>
<p>###2.22 内在化</p>
<ul>
<li>内在化：在脑海中出现图像，而且有声音，触觉和情感。</li>
<li><p>注意：具体信息的内在化效果最好，而抽象信息最适合比喻法怎样进行内在化</p>
<ol>
<li>明确你要内在化的概念。这是一个生物过程，还是编程中的函数或者是一个数学概念？</li>
<li>从建立脑海中的图像开始。如果你不习惯内在化，可以先试着在纸上画出概念的粗略图，多次尝试后，你就会直接在脑海中想象了。</li>
<li>脑海中的图像是静态的，还是栩栩如生的动态场景？掌握一个行列式需要好几个步骤，所以要让图像动起来，就仿佛在看一部电影一样。</li>
<li>现在开始加上其他感官。试着用手去拿它，去摸它，去打开它，去嗅它的味道，去听它的声音，动用你身体的所有感官，将所有的感觉与运动的图像相联系。</li>
<li>加入更多的感觉或情感。</li>
<li>不断重复和优化图像，直到你一想到它就能很快地回忆起知识。 </li>
</ol>
</li>
</ul>
<p>###2.23 图表法</p>
<ol>
<li>流程图：一系列的步骤；历史事件；一个系统。</li>
<li>概念图：观点之间的内在关系3. 图像：用粗糙简单的涂鸦来代替文字，包括观点和观点之间的联系。</li>
</ol>
<p>##2.3 随意信息的处理</p>
<ol>
<li>联想法</li>
<li>挂钩法</li>
<li>信息压缩技术</li>
</ol>
<p>###2.31 联想法联想法：将一系列观点串在一起，就像链条。</p>
<p>联想法的步骤：</p>
<ol>
<li>创造顺序</li>
<li>给每一项预设一个符号</li>
<li>创建属于自己的联想，前后项的联系</li>
</ol>
<h3 id="2-32-挂钩法"><a href="#2-32-挂钩法" class="headerlink" title="2.32 挂钩法"></a>2.32 挂钩法</h3><ul>
<li>挂钩法：将要记忆的信息与数字联系在一起。</li>
</ul>
<h3 id="2-33-信息压缩技术"><a href="#2-33-信息压缩技术" class="headerlink" title="2.33 信息压缩技术"></a>2.33 信息压缩技术</h3><ul>
<li>信息压缩：减少信息的容量，寻找信息的逻辑关系信息压缩的三种方式：<ol>
<li>记忆术:用一个短语储存数个信息的方法</li>
<li>图像联系：简单的符号替代每一个信息，然后将这些符号放在一张图像中</li>
<li>笔记压缩:  <ul>
<li>拿几张空白纸。准备好要压缩的笔记，这个练习可能会花费一两小时，所以要确保你有这么多时间。 </li>
<li>用最小的字，写下笔记中的主要观点。使用尽可能少的字。 - 接着写下与之相联系的观点、公式、概念或定义。尽可能写小一点和写少一点，节省空间。 </li>
<li>持续上述自由写下观点的过程，直到将笔记中的每一个主要观点都写了下来为止。最后你得到大约1～3张密密麻麻写满信息的纸。 </li>
<li>有时候，还可以更进一步，将上面压缩后的内容加工、修饰得更有条理，更好看一些。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="2-4-以项目为基础的学习"><a href="#2-4-以项目为基础的学习" class="headerlink" title="2.4 以项目为基础的学习"></a>2.4 以项目为基础的学习</h2><ul>
<li>以项目为基础的学习方式简单地说就是设定一个需要1～3个月达成的目标，达成目标的过程就是学习的过程，达成了目标也就达到了学习的效果。为了完成项目，你必须围绕着目标努力学习，以项目为基础的学习符合整体性学习的每一个过程。</li>
</ul>
<h2 id="2-5-整体性学习技术的实际应用"><a href="#2-5-整体性学习技术的实际应用" class="headerlink" title="2.5 整体性学习技术的实际应用"></a>2.5 整体性学习技术的实际应用</h2><p>费曼技巧：<br>第一步：选择要学习的概念首先选好你打算深入理解的概念，拿一张空白纸，在最上方写下概念的名称。<br>第二步：设想你是老师，正在试图教会一名新生这个知识点这一步你要假想自己费尽口舌让一名毫无这方面知识的学生听懂，并把你的解释记录下来。这一步至关重要，因为在自我解释那些你理解或不理解的知识过程中，你会理解得更好，而原先不明白的地方也得以理清。<br>第三步：当你感到疑惑时，返回去吧。每当你碰到难题感到疑惑时，别急着往下走，学习不是单行道，回过头来，重新阅读参考材料、听讲座或找老师解答，直到你觉得搞懂了为止，然后把解释记到纸上。<br>第四步：简单化和比喻如果你的解释很啰唆或者艰涩，尽量用简单直白的语言重新表述它，或者找到一个恰当的比喻以更好地理解它。你可以通过这种技术仔细地查明到底是什么地方你不明白，然后你可以去翻阅教材、笔记或询问老师，弄清楚到底你遗漏了哪些关键知识。费曼技巧对于自我测试、考察对知识点的理解程度，是一个真正的好方法。因为如果你不翻阅教科书就能用自己的话把观点解释清楚，那么就意味着你真正理解了该观点。</p>
<h2 id="Part-3-超越整体性学习"><a href="#Part-3-超越整体性学习" class="headerlink" title="#Part 3 超越整体性学习"></a>#Part 3 超越整体性学习</h2><h2 id="3-1-成为高效学生的关键点："><a href="#3-1-成为高效学生的关键点：" class="headerlink" title="3.1 成为高效学生的关键点："></a>3.1 成为高效学生的关键点：</h2><ol>
<li>能量管理</li>
<li>不要“学习”（Don’t study）</li>
<li>绝不拖延时间</li>
<li>批处理</li>
<li>有组织</li>
</ol>
<h3 id="3-11-能量管理"><a href="#3-11-能量管理" class="headerlink" title="3.11 能量管理"></a>3.11 能量管理</h3><ul>
<li>增加你的能量储备</li>
<li>坚持运动 </li>
<li>充足的睡眠 </li>
<li>多吃粗纤维，粗加工的食物 </li>
<li>多喝水 </li>
<li>少吃多餐</li>
<li>将日程表由线性的改为循环式的 </li>
<li>一周休息一天 </li>
<li>工作在白天集中完成 </li>
<li>设定90分钟集中完成某任务 </li>
</ul>
<p>###3.12 不要学习</p>
<p>大多数学生认为如果不能一直待在图书馆、坐在书桌前沉思苦读，就会有负罪感。于是学生生活变成了一种持久的自我斗争过程──总是试图多‘学习’，但总是感到收获少。这就好像总是做出一副吃饭的样子，但是吃下去得不多，消化得不够，吸收得也不好，如此这般学习效果怎么可能好呢？不用“学习”（学习就好比整个食物经过咀嚼、消化、吸收的过程，它不是表面看起来“吃”的动作。人们不可能永远吃个不停，所以学习也不是坐在书桌前越长越好，学习需要挑选要吃的食物（获取信息）、咀嚼（明白阶段）、消化（理解阶段）、吸收（应用阶段）。</p>
<p> 学习的定义：学习不是指坐在书桌前12个小时，也不是指每天坚持看书。这些是学习的表象，不是学习的实质。</p>
<p>###3.13 绝不拖延周/日目标体系:</p>
<ol>
<li>每周周末，列一个清单，包括所有的任务、作业以及你想在下周完成的读书和学习活动。</li>
<li>每天晚上，检查周计划，列出每日目标清单。</li>
</ol>
<p>###3.14 批处理<br>批处理的意思就是将那些类似的、散在的工作集中起来一次做完。批处理有助于节省时间，因为你可以集中时间和精力。例如：某个时间把一周需要阅读的材料一次性读完，而抽出另外一个时间连续写三四篇文章。批处理的使用技巧：</p>
<ul>
<li>批处理最适用于将那些需要时间不长的零散工作放在一起做。 </li>
<li>一次性完成作业。如果一项作业花费的时间不会超过8小时，我就坐在凳子上一鼓作气完成它。将一个花3小时就可以写完的文章，分成15次零散时间内完成，肯定会浪费很多时间，每一次都要花时间重新鼓起写作的激情才能开始正式的写作。 </li>
<li>提髙注意力阈值。注意力阈值就是指集中完成某项工作的最长时间，超过这个时间，注意力就急剧下降。通过不断接受越来越多的批处理，你可以逐渐提高你的注意力阈值。阈值越高，表示能一次完成的工作量也越大。 </li>
</ul>
<p>###3.15 有组织让你变得有组织：</p>
<ul>
<li>所有的物品都放在固定的位置。作业、课外作业以及约会日期都记录在固定的地方。没有固定地方的结果就是混乱。专门找一个地方放东西，这样会更容易放得有序。</li>
<li>随身携带一个记事本。每天随时记录，日积月累，必有所获。</li>
<li>坚持日历和做事清单。应用做事清单记录任务和目标，使用日历来记录要做的事和截止日期。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-19e2323f8483e093.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2016/12/20/hello-world/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2016/12/20/hello-world/</id>
    <published>2016-12-20T01:05:03.000Z</published>
    <updated>2017-01-10T11:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
